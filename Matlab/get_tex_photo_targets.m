%% Determine photostimulation groups 
% Using result files generated by OnlineProcTexture.m and OnlinePhotoexcitability.m

% clear all
%% define colors
[plot_color] = online_tex_init_color();

%% load proc file
try
    [tex_file,tex_path] = uigetfile('*.mat','Select ProcTex data');
    disp(['Loaded ProcTex file :',fullfile(tex_path,tex_file)])
    load(fullfile(tex_path,tex_file));
catch
    warning('tex file not loaded')
end

try
    [photo_file,photo_path] = uigetfile('*.mat','Select ProcPhotoExci data',tex_path);
    disp(['Loaded file :',fullfile(photo_path,photo_file)])
    load(fullfile(photo_path,photo_file));
catch
    warning('photo file not loaded')
end

%% check if cnm indices match
tex_cnm_idx = extractfield(tex_output_struct.cell_struct,'cnm_idx');
photo_cnm_idx = extractfield(photo_output_struct.cell_struct,'cnm_idx');

if isequal(tex_cnm_idx, photo_cnm_idx)
    disp('Component idx matched')
    cnm_idx = tex_cnm_idx;
    num_cells = length(cnm_idx);
else
    warning('Component idx mismatch! - check loaded files')
end

%% merge cell struct into one
cell_struct = struct();
photo_fds = fields(photo_output_struct.cell_struct);
tex_fds = fields(tex_output_struct.cell_struct);

for c = 1:num_cells
    for f = 1:numel(photo_fds)
        cell_struct(c).(photo_fds{f}) = photo_output_struct.cell_struct(c).(photo_fds{f});
    end
    for f = 1:numel(tex_fds)
        cell_struct(c).(tex_fds{f}) = tex_output_struct.cell_struct(c).(tex_fds{f});
    end
    
    cell_struct(c).centroid = cell_struct(c).jsf.centroid;
    cell_struct(c).coordinates = cell_struct(c).jsf.coordinates;
end

%% plot photo and texture auc
figure('name','auc plots')
subplot(1,2,1)
hold on
histogram(extractfield(cell_struct,'photo_auc_zscore'),'facecolor',[.7 .7 .7],'edgecolor','none','BinWidth',.5)
histogram(extractfield(cell_struct(extractfield(cell_struct,'is_photo')==1),'photo_auc_zscore'),'facecolor','none','edgecolor',[1,0,0],'BinWidth',.5)

axis square
xlabel('Photo response auc (zscore)')

subplot(1,2,2)
hold on
histogram(extractfield(cell_struct,'tex_auc_zscore'),'facecolor',[.7 .7 .7],'edgecolor','none','BinWidth',.5)
histogram(extractfield(cell_struct(extractfield(cell_struct,'is_tuned')==1),'tex_auc_zscore'),'facecolor','none','edgecolor',[0,0,1],'BinWidth',.5)
xlabel('Tex response auc (zscore)')
axis square

%% show photostim response and texture response on FOV
figure('name','response amp fov','position',[100 100 1200 800])

ax2 = subplot(1,3,1);
plot_value_in_rois( cell_struct, 'sta_amp_correct_stim_1',[256 256],ax2,'IF_NORM_PIX',0,'IF_CONTOUR',0);
set(gca,'Ydir','reverse')
title('Tex1 response (correct trials)')

ax2 = subplot(1,3,2);
plot_value_in_rois( cell_struct, 'sta_amp_correct_stim_2',[256 256],ax2,'IF_NORM_PIX',0,'IF_CONTOUR',0);
set(gca,'Ydir','reverse')
title('Tex2 response (correct trials)')

ax3 = subplot(1,3,3);
plot_value_in_rois( cell_struct, 'photo_sta_amp',[256 256],ax3,'IF_NORM_PIX',0,'IF_CONTOUR',0);
set(gca,'Ydir','reverse')
title('Photo response')

% mark texture cells on FOV
mark_idx = find(extractfield(cell_struct,'pref_tex')==1);
mark_cells_on_fov(cell_struct,mark_idx,plot_color.stim1)
mark_idx = find(extractfield(cell_struct,'pref_tex')==2);
mark_cells_on_fov(cell_struct,mark_idx,plot_color.stim2)
mark_idx = find(extractfield(cell_struct,'is_photo')==1);
mark_cells_on_fov(cell_struct,mark_idx,plot_color.photo,'MarkerSize',300,'Linewidth',1)

%% define two target groups
% criteria 
photo_cell_struct = cell_struct(extractfield(cell_struct,'is_photo')==1);


%% generate target tiffs

 

