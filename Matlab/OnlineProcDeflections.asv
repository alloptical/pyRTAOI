% analyse baseline imaging session in delection task
% note: rois idx doesn't match with what's shown in pyRTAOI image window
% run this to quickly find sensory-opsin-positve cells  

% ZZ 2018

% adapted from OnlineProcVisual
% TO DO
%  get resuls from PhotoExcitability test

%% add path - change this for rig
clear all
close all
clc

% ZZ PC
% addpath(genpath('C:\Users\User\Desktop\pyRTAOI-rig\Matlab'));
% cd('C:\Users\User\Desktop\pyRTAOI-rig\Matlab');

% BRUKER1
% matlab_set_paths_zz

%% stim parameter - CHANGE THIS
opt.N = 1.5; % threshold for significant auc
opt.sta_pre_frames = 90; % sta will be taken relative to stim-on
opt.sta_post_frames = 120;
opt.sta_baseline_frames = 30; % relative to beginning of sta traces, trial-trigger frame in sta traces
opt.gocue_frame = 105; % relative to trial start, 3.5s
opt.stimon_frame = 60; % relative to trial start
opt.trial_length = 1+opt.sta_pre_frames+opt.sta_post_frames;

% frame indices relative to sta trace
opt.sta_stimon_frame = opt.sta_pre_frames;
opt.sta_trialon_frame = opt.sta_pre_frames-opt.gocue_frame;
opt.sta_avg_frames = [15:1:45]+opt.stimon_frame+opt.sta_baseline_frames;
opt.sta_peak_search_range =  opt.sta_avg_frames;
opt.sta_gocue_frame = opt.gocue_frame+opt.sta_baseline_frames;


opt.sta_amp_thresh = 1;
opt.frame_rate = 30;

opt.flag_use_peak = false; % if false then will use average to get roc
opt.correct_trial_only = false; % only use correct trials to get tunning

% select cell identity for readout and stimulation
opt.target_idx_fd = {'stim1','stim2'};
opt.trigger_idx_fd = 'all';
opt.fov_size = double(cnm_dims);
opt.ds_factor = caiman_data.ds_factor;


opt.plot_stim_types = [1 1 1 3 2 2 2]; % these pairs should be matched as in experiment_trial_seq
opt.plot_var_types  = [3 5 8 2 2 4 6];

[trial_color] = deflect_init_color();
%% load CAIMAN data
[caiman_file,caiman_path] = uigetfile('*.mat','Select texture caiman data');
caiman_data = load(fullfile(caiman_path,caiman_file)); 
disp(['Loaded file :',fullfile(caiman_path,caiman_file)])

%% load Pybehavior data
try
[pb_file,pb_path] = uigetfile('*.mat','Select pybehavior data',caiman_path);
behavior_data =  load(fullfile(pb_path,pb_file)) ;
disp(['Loaded file :',fullfile(pb_path,pb_file)])
[trials,odd_trial_idx] = make_trials_struct(behavior_data);
FLAG_PYBEHAV_LOADED = true;
catch
    FLAG_PYBEHAV_LOADED = false;
end
%% load trial trigger indices with cue (in case pybehav did not follow trial trigger)
try
[pb_file,pb_path] = uigetfile('*.mat','Select trial trigger idx',caiman_path);
disp(['Loaded file :',fullfile(pb_path,pb_file)])
trialtriggers_idx=  load(fullfile(pb_path,pb_file));
trial_idx = trialtriggers_idx.trialtrigger_idx;
FLAG_TRIALTRIGGER_IDX_LOADED =  true;
tot_num_trials = min([length(caiman_data.trialOrder),length(trial_idx),length(trials.stim_type)]); % in case some trial triggers were sent after the session by manual clicking when bebehav is still recording
catch
    trial_idx = [];
    tot_num_trials = min(length(caiman_data.trialOrder),length(trials.stim_type));
    disp('Trusting trial triggers')
    FLAG_TRIALTRIGGER_IDX_LOADED =  false;
end

%% config save path
save_path = [caiman_path filesep 'analysis_files'];
if ~exist(save_path, 'dir')
    mkdir(save_path)
end

fig_save_path = [caiman_path filesep 'figures'];
if ~exist(fig_save_path, 'dir')
mkdir(fig_save_path)
end
%% setup save path and name
opt.output_path = caiman_path;
opt.exp_name = strrep(caiman_file,'.mat','proc');

%% check if trial order matches in behavior and caiman file
if FLAG_TRIALTRIGGER_IDX_LOADED % discard caiman trial triggers that didn't evoke a trial
    caiman_data.stim_frames_caiman = caiman_data.stim_frames_caiman(trial_idx);
    caiman_data.sensory_stim_frames = caiman_data.sensory_stim_frames(trial_idx);
    caiman_data.trialOrder = trials.stim_type(1:tot_num_trials); %
    disp('discarded null trial triggers')
end

if FLAG_PYBEHAV_LOADED
    fds = fields(trials);
    for i = 1:numel(fds)
        fd = fds{i};
        trials.(fd) = trials.(fd)(1:tot_num_trials);
    end
    
    if isequal(trials.stim_type,caiman_data.trialOrder)
        disp('data matched')
    else
        warning('trial order mismatch!')
    end
else
    warning('no pybehav data loaded')
end
%% organise data (generate plots for sanity check)
tex_stim_frames = {};
if(~isempty(caiman_data.stim_frames_caiman))
    sens_stim_frames = caiman_data.sensory_stim_frames+caiman_data.t_init;
else
    sens_stim_frames = [];
end

% discard sens stim frames beyond tottime (deal with senarios when movie is aborted early)
sens_stim_frames(sens_stim_frames>caiman_data.t_cnm-opt.sta_post_frames-opt.sta_pre_frames) = [];
num_trials = length(sens_stim_frames);

% trial type
trialOrder = caiman_data.trialOrder(1:num_trials); % this is stim_types, need stim_var to specify deflection amplitudes
trialTypes = unique(trialOrder);
num_stim_type = length(unique(trialOrder)); % orientations/texture

% only get correct trials
if opt.correct_trial_only && FLAG_PYBEHAV_LOADED
    sens_stim_frames = sens_stim_frames(trials.correct==1);
    trialOrder = trialOrder(trials.correct==1);
elseif ~ FLAG_PYBEHAV_LOADED
    % make a dummy trial struct (setting all trials to correct)
    trials.correct = ones(size(sens_stim_frames));
    trials.incorrect = zeros(size(sens_stim_frames));
    trials.stim_type = trialOrder;
end

for i = 1:numel(trialTypes)
    tex_stim_frames{i} = sens_stim_frames(trialOrder == trialTypes(i));
end

% roi indices
opsin_positive = caiman_data.opsin_positive;
accepted_idx = caiman_data.accepted_idx+1;
opsin_positive_idx = accepted_idx(opsin_positive>0);

% color trial by stim type
hsv_lut = colormap(hsv);
hsv_lut = hsv_lut(2:end-3,:);
close
indices = round(linspace(1,size(hsv_lut,1),num_stim_type));
opt.trial_color = zeros(numel(trialOrder),3);
for t = 1:numel(trialOrder)
    opt.trial_color(t,:) = trial_color.(['stim' num2str(trialOrder(t))]);
end

opt.type_color = [trial_color.('stim1');trial_color.('stim2')];
%% make cnm data structure
cnm_struct = struct();
cnm_dims = double(caiman_data.cnm_dims);
cnm_image = reshape(caiman_data.cnm_b,cnm_dims);
cnm_A = full(caiman_data.cnm_A);
num_frames = caiman_data.t_cnm;
num_comp = size(cnm_A,2);
comp_shape =[cnm_dims(1),cnm_dims(2),num_comp];
cm = com(sparse(double(cnm_A)),cnm_dims(1),cnm_dims(2)); % center of mass


if ~isempty(caiman_data.frames_skipped)
    skip_frames = caiman_data.frames_skipped + caiman_data.t_init;
    tot_frames = num_frames + numel(skip_frames);
    caiman_frames = setdiff([1:tot_frames],skip_frames);
else
    caiman_frames = 1:num_frames;
    tot_frames = num_frames;
end

for i = 1:num_comp
    cnm_struct(i).shape = reshape(cnm_A(:,i),cnm_dims);
    cnm_struct(i).noisyC = caiman_data.noisyC(i+1,1:num_frames);
    cnm_struct(i).deconvC = caiman_data.cnm_C(i,1:num_frames);
    cnm_struct(i).centroid = cm(i,:);
    cnm_struct(i).frame_added = find(cnm_struct(i).noisyC >0,1);
    
    % set skipped frames to nan
    temp_trace = nan(1,tot_frames);
    temp_trace(caiman_frames) =  caiman_data.cnm_C(i,1:num_frames);
    temp_trace = fillmissing(temp_trace,'linear');
    cnm_struct(i).deconvC_full = temp_trace;
    
    temp_trace = nan(1,tot_frames);
    temp_trace(caiman_frames) =  caiman_data.noisyC(i+1,1:num_frames);
    temp_trace = fillmissing(temp_trace,'linear');
    cnm_struct(i).noisyC_full = temp_trace;
    
    % use stimon (start of deflection) frame as 'stim frame' for sta traces
    cnm_struct(i).stim_frames = sens_stim_frames+opt.stimon_frame;

end

temp_trace = nan(1,tot_frames);
temp_trace(caiman_frames) =  caiman_data.noisyC(1,1:num_frames);
temp_trace = fillmissing(temp_trace,'linear');
backgroundC = temp_trace;

%% only get accepted cells
accepted_idx = caiman_data.accepted_idx+1;
num_cells = numel(accepted_idx);

%% only analyse frames from the current recording
glob_trialon_frames = caiman_data.sensory_stim_frames + caiman_data.t_init;
glob_trialon_frames(glob_trialon_frames>caiman_data.t_cnm-opt.sta_post_frames-opt.sta_pre_frames) = [];

%% plot spatial components and save to cell struct
com_fov = zeros(cnm_dims);
accepted_com_fov = zeros(cnm_dims);
for i = 1:num_comp
    com_fov = com_fov+cnm_struct(i).shape;
end

for i = accepted_idx
    accepted_com_fov = com_fov+cnm_struct(i).shape;
end


cnm_plot_options = CNMFSetParms;
cnm_plot_options.roi_color = [colormap(lines);colormap(lines);colormap(lines)];
close

figure('name','fov','position',[100 100 1200 800])
subplot(1,3,1)
imagesc(com_fov)
colormap(gray)
axis square
title('Detected ROIs')

subplot(1,3,2)
imagesc(accepted_com_fov)
colormap(gray)
axis square
title('Accepted ROIs')


subplot(1,3,3)
[CC,jsf] = plot_contours(sparse(double(cnm_A)),cnm_image,cnm_plot_options,1,[],[],[1 1 1]);
colormap(gray)
axis square
title('GCaMP')

cell_struct = struct();
for i = 1:num_cells
    this_idx = accepted_idx(i);
    temp_coords = jsf(this_idx).coordinates;
    lin_idx = zeros(size(temp_coords,1),1);
   
    for t = 1:size(temp_coords,1)
        lin_idx(t) = sub2ind(cnm_dims,temp_coords(t,1),temp_coords(t,2));
    end
    cell_struct(i).contour = CC{this_idx};
    cell_struct(i).lin_coords = lin_idx;
    cell_struct(i).coordinates = jsf(this_idx).coordinates;
    cell_struct(i).pix_values = jsf(this_idx).values;
    cell_struct(i).centroid = jsf(this_idx).centroid;
    cell_struct(i).opsin_positive = 0;
    cell_struct(i).cnm_idx = this_idx;
    cell_struct(i).jsf = jsf(this_idx);
    if(~isempty(find(opsin_positive_idx==i)))
         cell_struct(i).opsin_positive = 1;
    end
end

%% plot full traces
figure; hold on
plot_offset = 5;
stim_cell_count = 1;
non_stim_cell_count = 1;

for i = 1:num_cells
    this_cell_trace = cnm_struct(cell_struct(i).cnm_idx).deconvC_full;
    plot(this_cell_trace+i*plot_offset,'color','black','linewidth',1.5)
    stim_cell_count = stim_cell_count+1;
end
xlabel('Frames')
ylabel('ROI index')
yticks([ 1:num_cells].*plot_offset)
yticklabels(1:num_cells)
xlim([caiman_data.t_init tot_frames])
ylim([0 num_cells].*plot_offset+5)

% background
plot(backgroundC,'color',[.5 .5 .5],'linestyle',':')

for i = 1:numel(glob_trialon_frames)
    this_color = trial_color.(['stim' num2str(trials.stim_type(i) )]);
    plot([glob_trialon_frames(i) glob_trialon_frames(i)]+opt.stimon_frame,ylim,'color',this_color) % trial-on 
    plot([glob_trialon_frames(i) glob_trialon_frames(i)]+opt.gocue_frame,ylim,'color',this_color,'linestyle',':') % go-cue
end

%% plot psychometric curve
if FLAG_PYBEHAV_LOADED
plot_psycho_struct = get_psycho_curve(trials,opt.plot_stim_types,opt.plot_var_types);
figure('name','psychometric curve')

f = subplot(3,1,1); hold on
yyaxis right
plot(plot_psycho_struct.pc_misses,'-o','color',[.5 .5 .5])
ylabel('Fraction of miss trials')
ylim([0 1])
set(gca,'YColor',[0.5 0.5 0.5]);

yyaxis left
plot(plot_psycho_struct.pc_leftchoices,'-o','color',trial_color.L1)
plot(plot_psycho_struct.pc_rightchoices,'-o','color',trial_color.L2)

ylim([0 1])
ylabel('Fraction of choices')
set(gca,'YColor',[0 0 0]);

subplot(3,1,3); hold on
plot(plot_psycho_struct.leftvolts,'-o','color',trial_color.L1)
plot(plot_psycho_struct.rightvolts,'-o','color',trial_color.L2)

legend('Left','Right')
ylabel('Deflection strength (V)')
xlabel('Trial types')
end

%% manaully select threshold conditions - make it automatic later
TS_L1_fds = {'stim_2_var_2_incorrect'};
TS_L2_fds = {'stim_2_var_2_correct'};


%% get trial indices
% a trial type is defined by stim_type (which lickport is rewarded) and
% stim_var (deflection amplitude)
trial_indices = struct(); % % get trialtype-outcome indices
all_trial_types = unique(trials.stim_type.*100+trials.stim_var);
num_trial_types = length(all_trial_types);
all_trial_var = nan(1,num_trial_types);
all_trial_stim =  nan(1,num_trial_types);
for v = 1:num_trial_types
all_trial_var(v) = rem(all_trial_types(v),100);
all_trial_stim(v) = floor((all_trial_types(v)-all_trial_var(v))/100);
end
all_psycho_struct = get_psycho_curve(trials,all_trial_stim,all_trial_var);
% [stim var outcome]
for v = 1:num_trial_types
    this_var = all_trial_var(v);
    this_stim = all_trial_stim(v);
    trial_indices.(['stim_' num2str(this_stim) '_var_' num2str(this_var) '_correct'  ]) = find(trials.correct==1&trials.stim_type==this_stim&trials.stim_var == this_var);
    trial_indices.(['stim_' num2str(this_stim) '_var_' num2str(this_var) '_incorrect' ]) = find(trials.incorrect==1&trials.stim_type==this_stim&trials.stim_var == this_var);
    trial_indices.(['stim_' num2str(this_stim) '_var_' num2str(this_var) '_miss' ]) = find(trials.miss==1&trials.stim_type==this_stim&trials.stim_var == this_var);

end
%% plot all trial types and deflection volts
figure('name','all trial types and voltages');
subplot(2,1,1)
hold on
plot(all_psycho_struct.leftvolts,'-o','color',trial_color.L1)
plot(all_psycho_struct.rightvolts,'-o','color',trial_color.L2)
ylabel('Amplitude (V)')
legend('Left','Right')

subplot(2,1,2)
hold on
plot(all_psycho_struct.stim_types,'-o','color',[0 0 0])
plot(all_psycho_struct.stim_vars,'-o','color',[.5 .5 .5])
ylabel('Indices')
legend('Stim Type','Stim Var')
xlabel('Trial types')


%% get stim triggered average 
for i = 1:num_cells
    this_cell_trace = cnm_struct(cell_struct(i).cnm_idx).deconvC_full;
    this_num_trials = numel(cnm_struct(cell_struct(i).cnm_idx).stim_frames );
    this_sens_stim_frames =  cnm_struct(cell_struct(i).cnm_idx).stim_frames;
    cell_struct(i).num_trials = this_num_trials*cell_struct(i).opsin_positive;
    cell_struct(i).is_sensory = 0;
    cell_struct(i).is_offcell = 0;
    cell_struct(i).pref_orient = [];
    cell_struct(i).sta_amp = 0;
    cell_struct(i).sta_traces = []; 
    cell_struct(i).sta_trace = [];
    cell_struct(i).accepted = 0;
    cell_struct(i).pref_orient = nan;

    if(this_num_trials>0)
        % average across all stim types
        % using df 
%         [~,~,~,~,~,cell_struct(i).sta_traces,cell_struct(i).sta_trace] = make_sta_from_traces(this_cell_trace,this_sens_stim_frames,opt.sta_pre_frames,opt.sta_post_frames,1:opt.sta_baseline_frames);
          % using raw f
        [~,~,~,cell_struct(i).sta_traces,~,~,cell_struct(i).sta_trace] = make_sta_from_traces(this_cell_trace,this_sens_stim_frames,opt.sta_pre_frames,opt.sta_post_frames,1:opt.sta_baseline_frames);

            cell_struct(i).sta_amp = mean(cell_struct(i).sta_trace(opt.sta_avg_frames));
        
        if  cell_struct(i).sta_amp > opt.sta_amp_thresh
            cell_struct(i).is_sensory = 1;
        end        
    end
    
end

% sta of backgound component (for alignment check)
[~,~,~,~,~,bg_sta_traces,bg_sta_trace] =...
    make_sta_from_traces(backgroundC,sens_stim_frames+opt.sta_stimon_frame ,opt.sta_pre_frames,opt.sta_post_frames,1:opt.sta_baseline_frames);

%% Sort STAs by different trial types
trial_types = fields(trial_indices);
for i = 1:numel(trial_types)
    this_fd = trial_types{i};
    this_idx = trial_indices.(this_fd);
    this_idx = this_idx(this_idx<tot_num_trials);
    if ~isempty(this_idx)
            for c = 1:num_cells
                    cell_struct(c).(this_fd) = cell_struct(c).sta_traces( this_idx,:)';
            end
    end
end

%% GET CELL IDENTITY
% stimulus AUC calculated from correct trials with highest contrast and amp
stim_fds = {'stim_1_var_9_correct','stim_2_var_9_correct'}; 
num_shuf = 300;
peak_frame_range = opt.sta_peak_search_range;
avg_frame_range = opt.sta_avg_frames;
for i = 1:num_cells
    if ~ opt.flag_use_peak
        all_stim1 = mean(cell_struct(i).(stim_fds{1})(avg_frame_range,:),1);
        all_stim2 = mean(cell_struct(i).(stim_fds{2})(avg_frame_range,:),1);
    else
        all_stim1 = max(cell_struct(i).(stim_fds{1})(peak_frame_range,:),[],1);
        all_stim2 = max(cell_struct(i).(stim_fds{2})(peak_frame_range,:),[],1);

    end
labels = [ones(1,length(all_stim1)),2.*ones(1,length(all_stim2))]';
scores = [ all_stim1  all_stim2]';
scores(scores<0.01)=0;
[~,~,~, correct_stimulusAUC] = perfcurve(labels,scores,2);

% shuffle to get zscore stim auc
shuf_stim_auc = nan(1,num_shuf);
for s = 1:num_shuf
    shuf_labels = labels(randperm(length(labels))');
    [~,~,~, shuf_stim_auc(s)] = perfcurve(shuf_labels,scores,1);
end
cell_struct(i).correct_stimAUC_zscore = (correct_stimulusAUC-mean(shuf_stim_auc))/std(shuf_stim_auc);
cell_struct(i).correct_stimAUC = correct_stimulusAUC;
end

correct_stimulusAUC_zscore = extractfield(cell_struct,'correct_stimAUC_zscore');
correct_texAUC = extractfield(cell_struct,'correct_stimAUC');
cell_idx_struct = struct();
cell_idx_struct.all = 1:num_cells;
cell_idx_struct.stim2 = find(correct_stimulusAUC_zscore>opt.N& correct_texAUC>0.55); % cells prefering texture1 in correct trials
cell_idx_struct.stim1 = find(correct_stimulusAUC_zscore<-opt.N& correct_texAUC<0.45); % cells prefering texture2 in correct trials
cell_idx_struct.stim = unique([cell_idx_struct.stim1,cell_idx_struct.stim2]);

for c = 1:num_cells
    cell_struct(c).is_tuned = 0;
    cell_struct(c).pref = 0;
    if ismember(c,cell_idx_struct.stim)
        cell_struct(c).is_tuned = 1;
        if ismember(c,cell_idx_struct.stim1)
            cell_struct(c).pref = 1;
        else
            cell_struct(c).pref = 2;
        end
    end
end
%% MAKE OUTPUT FILE FOR PYRTAOI PHOTOEXCITABILITY TEST
[output1,save_time1] = generate_cell_idx_file(cell_struct,cell_idx_struct,[],opt);

%% Plot STAs for all components
figure('name','condition sta traces','units','normalized','outerposition',[0 0 1 1])
plot_num_cells = num_cells;
num_plot_cols = 8;
num_plot_rows = ceil(plot_num_cells/num_plot_cols);
for i = 1:plot_num_cells
    subtightplot(num_plot_rows,num_plot_cols,i)
    hold on
    % correct trials

    plot(cell_struct(i).(stim_fds{1}),'color',trial_color.L1,'linewidth',1)
    plot(cell_struct(i).(stim_fds{2}),'color',trial_color.L2,'linewidth',1)

    xlim([0 opt.sta_pre_frames+opt.sta_post_frames+1])
    axis square
    
    text(1,1,['Cell ' num2str(i) ' (ROI ' num2str(cell_struct(i).cnm_idx) ')'],'units','normalized','color','black','Horizontalalignment','right','VerticalAlignment','top')

    if(~isempty(find(opsin_positive_idx==i)))
        text(1,1,['Cell ' num2str(i)],'units','normalized','color','r','Horizontalalignment','right','VerticalAlignment','top')
    end
    box off
    
    % mark tuned cells
    if( cell_struct(i).is_tuned)
        box on
        this_color = trial_color.(['L' num2str(cell_struct(i).pref)]);
        set(gca,'XColor',this_color,'YColor',this_color,'linewidth',3)
    end
    
    % mark time
    plot([1,1].*opt.sta_stimon_frame, ylim,'color','black','linestyle',':')
    if ~ opt.flag_use_peak
        plot([avg_frame_range(1),avg_frame_range(end)],[0,0],'color',[.5 .5 .5],'linewidth',2)
    else
        plot([peak_frame_range(1),peak_frame_range(end)],[0,0],'color',[.5 .5 .5],'linewidth',2)
    end
    
    % show auc
    text(0.05,.8,['trial auc ' num2str(cell_struct(i).correct_stimAUC,'%10.2f')],'units','normalized', 'horizontalalignment','left', 'color','black')
    text(0.05,.7,['zscore auc '  num2str(cell_struct(i).correct_stimAUC_zscore,'%10.2f') ],'units','normalized', 'horizontalalignment','left', 'color','black')
    
    % modify x ticks
    xaxisvalues = [0:45:opt.sta_pre_frames+opt.sta_post_frames];
    xticks(xaxisvalues)
    xticklabels(arrayfun(@(x){num2str(x)},(xaxisvalues-opt.sta_trialon_frame)./opt.frame_rate))
    
end
export_fig([fig_save_path filesep 'STATrace_' strrep(caiman_file,'.mat','.png')])

%% Train decoders
% add some fields to trialcolor
for i = 1:numel(trial_types)
    this_fd = trial_types{i};
    if contains(this_fd,'stim_1') && contains(this_fd,'_correct')
        trial_color.(this_fd) = trial_color.L1;
    end
    if contains(this_fd,'stim_1')&& contains(this_fd,'_incorrect')
        trial_color.(this_fd) = trial_color.ipsi_L1;
    end
    
    if contains(this_fd,'stim_2') && contains(this_fd,'_correct')
        trial_color.(this_fd) = trial_color.L2;
    end
    if contains(this_fd,'stim_2')&& contains(this_fd,'_incorrect')
        trial_color.(this_fd) = trial_color.contra_L2;
    end
    
    if contains(this_fd,'stim_3') && contains(this_fd,'_correct')
        trial_color.(this_fd) = trial_color.correct;
    end
    if contains(this_fd,'stim_3')&& contains(this_fd,'_incorrect')
        trial_color.(this_fd) = trial_color.incorrect;
    end
    
     if contains(this_fd,'stim_1') && contains(this_fd,'_miss')
         trial_color.(this_fd) = [94, 34, 92]./255;
     end
     
     if contains(this_fd,'stim_2') && contains(this_fd,'_miss')
         trial_color.(this_fd) = [34, 64, 94]./255;
     end
     
     if contains(this_fd,'stim_3') && contains(this_fd,'_miss')
         trial_color.(this_fd) = [.3 .3 .3];
     end
end
%% factor analysis
% using trials with highest contrast
fa_opt.bin_size = 1;
fa_opt.gocue_bin = floor(opt.sta_gocue_frame/fa_opt.bin_size);
fa_opt.stim_bin = ceil(opt.sta_stimon_frame/fa_opt.bin_size);
% fa_opt.frames_to_train = round([15:120]./fa_opt.bin_size);
fa_opt.frame_rate = 30/fa_opt.bin_size;
fa_opt.Fs = opt.frame_rate;
fa_opt.trial_length = opt.trial_length/fa_opt.bin_size;
fa_opt.trial_color = trial_color;

fa_opt.idx_fields = {opt.trigger_idx_fd};
fa_opt.fd_names = {'stim_1_var_9_correct','stim_1_var_9_incorrect','stim_2_var_9_correct','stim_2_var_9_incorrect',...
                   'stim_3_var_2_correct','stim_3_var_2_incorrect','stim_2_var_2_correct','stim_2_var_2_incorrect',...
                   'stim_1_var_5_correct','stim_1_var_5_incorrect'};
fa_opt.plot_fds = fa_opt.fd_names;
fa_opt.m = 3;
fa_opt.IF_MEDFILT = 0;
disp('Rnning factor analysis...')
tic
[traces_in,fa_trial_idx,num_trials] = get_input_seq(cell_struct,cell_idx_struct.(fa_opt.idx_fields{1}),...
    fa_opt.fd_names,fa_opt.bin_size,'IF_MEDFILT',fa_opt.IF_MEDFILT);%%
fa_struct = struct();
fa_struct.mean = mean(traces_in);
fa_struct.std = std(traces_in);
[fa_struct.lambda,fa_struct.psi,fa_struct.T,fa_struct.stats,fa_struct.F] = factoran(traces_in,fa_opt.m,'Xtype','data','Maxit',1000);
invsqrtPsi = diag(1 ./  sqrt(fa_struct.psi)); % get transition matrix (multiply to zscored data)
fa_struct.transmat = invsqrtPsi/(fa_struct.lambda'*invsqrtPsi);


fa_trial_idx.TS_L1 = cell2mat(cellfun(@(x)fa_trial_idx.(x),TS_L1_fds,'UniformOutput' , false));
fa_trial_idx.TS_L2 = cell2mat(cellfun(@(x)fa_trial_idx.(x),TS_L2_fds,'UniformOutput' , false));

[fa_traj_struct,num_fs] = get_pop_vectors(fa_struct.F,fa_opt.trial_length,fa_trial_idx);
toc
disp('...Done')
plot_pop_vectors(fa_traj_struct,fa_opt.plot_fds,fa_opt.m,fa_opt,'plot_ylabel','Factor level');
%% get stim decoder (using easy trials)
stim_opt = fa_opt;
stim_opt.fd_names = stim_fds;
stim_opt.frames_to_avg = stim_opt.stim_bin:1:stim_opt.gocue_bin;
stim_opt.frames_to_train = round([90:1:120]/stim_opt.bin_size);
stim_opt.Nstd = 2;
stim_opt.min_frames = 30;
stim_opt.IF_FRAMEWISE =0;
stim_struct = {};
stim_proj_struct = {};
disp('Rnning stim decoder...')
tic
stim_struct =  get_binary_classifier( stim_struct,fa_traj_struct, stim_opt,'IF_FRAMEWISE',stim_opt.IF_FRAMEWISE,'fd_names',stim_opt.fd_names);
 [stim_proj_struct] = get_projections(fa_traj_struct,stim_struct.B(:,2:end)',stim_opt.fd_names,'proj_struct',stim_proj_struct,'bias',stim_struct.B(:,1));
plot_pop_vectors(stim_proj_struct,stim_opt.fd_names,1,stim_opt,...
        'plot_ylabel','Stim projection')
[ stim_struct ] =  get_binary_decoder_disc_time( stim_proj_struct, stim_struct,...
    stim_opt.fd_names,stim_opt,'IF_FRAMEWISE',stim_opt.IF_FRAMEWISE,'threshold',0);
toc
disp('Done')

figure; hold on
plot_binary_decoder(stim_struct,stim_opt)
title('Stimulus decoder')
%% get choice decoder (using threshold trials)
choice_opt = stim_opt;
choice_opt.fd_names = {'TS_L1','TS_L2'}; % Choice 1 will be positive
choice_opt.frames_to_avg = [100:120];

choice_struct = {};
choice_proj_struct = {};
disp('Rnning choice decoder...')
tic
choice_struct =  get_binary_classifier( choice_struct,fa_traj_struct, choice_opt,'IF_FRAMEWISE',choice_opt.IF_FRAMEWISE,'fd_names',choice_opt.fd_names);
 [choice_proj_struct] = get_projections(fa_traj_struct,choice_struct.B(:,2:end)',choice_opt.fd_names,'proj_struct',choice_proj_struct,'bias',choice_struct.B(:,1));
plot_pop_vectors(choice_proj_struct,choice_opt.fd_names,1,choice_opt,...
        'plot_ylabel','Stim projection')
[ choice_struct ] =  get_binary_decoder_disc_time( choice_proj_struct, choice_struct,...
    choice_opt.fd_names,choice_opt,'IF_FRAMEWISE',choice_opt.IF_FRAMEWISE,'threshold',0);
toc
disp('Done')

figure; hold on
plot_binary_decoder(choice_struct,choice_opt)
title('Choice decoder')

%% test decoder performance
decod_struct = choice_struct;
opt.pop_opt = choice_opt;

weights = fa_struct.transmat* decod_struct.B(2:end)';
thresh = decod_struct.thresh_fix;
[norm_weights,norm_thresh] = get_norm_weights(weights,thresh,fa_struct.mean,fa_struct.std);
test_opt = stim_opt;
test_opt.trial_color = trial_color;
test_opt.fd_names = {'stim_1_var_3_correct','stim_1_var_3_incorrect','stim_1_var_3_miss',...
                     'stim_1_var_5_correct','stim_1_var_5_incorrect','stim_1_var_5_miss',...
                     'stim_3_var_2_correct','stim_3_var_2_incorrect','stim_3_var_2_miss'...
                     'stim_2_var_2_correct','stim_2_var_2_incorrect','stim_2_var_2_miss'...
                     'stim_2_var_4_correct','stim_2_var_4_incorrect','stim_2_var_4_miss'...
                     'stim_2_var_6_correct','stim_2_var_6_incorrect','stim_2_var_6_miss'};
proj_struct = struct();
 [proj_struct] = get_projections(cell_struct(cell_idx_struct.(fa_opt.idx_fields{1})),norm_weights,test_opt.fd_names,'proj_struct',proj_struct,'bias',-norm_thresh,'IS_CELL_STRUCT',1);

plot_pop_vectors(proj_struct,test_opt.fd_names,1,test_opt,...
        'plot_ylabel','Projection','plot_num_cols',3,'IF_PLOT_RAW_ONLY',1)
suptitle('Choice decoder projections')
export_fig([fig_save_path filesep 'DecodProject_' strrep(caiman_file,'.mat','.png')])


%% GET PHOTOEXCITABLE TARGETS
% load result file from OnlinePhotoexcitability.m
IF_PHOTOTEST_LOADED = false;
try
    [photo_file,photo_path] = uigetfile('*.mat','Select ProcPhotoExci data',caiman_path);
    disp(['Loaded file :',fullfile(photo_path,photo_file)])
    load(fullfile(photo_path,photo_file));
    IF_PHOTOTEST_LOADED = true;
catch
    warning('photo file not loaded')
end

if IF_PHOTOTEST_LOADED
    %% merge cell struct into one
    photo_fds = fields(photo_output_struct.cell_struct);
    for c = 1:num_cells
        for f = 1:numel(photo_fds)
            cell_struct(c).(photo_fds{f}) = photo_output_struct.cell_struct(c).(photo_fds{f});
        end  
    end
    %% get photoexcitable target indices
    photo_idx.all = find(extractfield(cell_struct,'is_photo')>0);
    cell_idx_struct.photo_stim1 = intersect(photo_idx.all, cell_idx_struct.stim1);
    cell_idx_struct.photo_stim2 = intersect(photo_idx.all, cell_idx_struct.stim2);
    opt.target_idx_fd = {'photo_stim1','photo_stim2'}; % overide target indices with the excitable ones
end


%% generate parameters for pyRTAOI population analysis
pop_params = struct();
pop_params.weights = norm_weights;
pop_params.thresh = norm_thresh;
pop_params.frames_enable_trigger = max(opt.stimon_frame,fa_opt.bin_size*(decod_struct.shuf_disc_frame-opt.sta_baseline_frames));
pop_params.condition_stim_type = [1,3,2,2];
pop_params.condition_stim_var  = [5,2,2,4]; % type and var need to match
pop_params.condition_type = {[105 302 202 204]}; % 100*stim_type + stim_var

%% MAKE OUTPUT FILE FOR PYRTAOI
[output2,save_time2] = generate_cell_idx_file(cell_struct,cell_idx_struct,pop_params,opt);

%% MAKE PYBEHAV EXTERNAL FILE
loop_stim_types = [pop_params.condition_stim_type 1 2]; % condition trial types plus two extreme stim types
loop_stim_vars  = [pop_params.condition_stim_var  3 6];
num_loops = 30;
file_save_name = [opt.exp_name '_PyBehavior_' save_time2];
[trial_seq] = generate_deflection_trial_seq(loop_stim_types,loop_stim_vars,num_loops,opt.output_path,file_save_name);


%% ============================     END    ================================





%% project threshold trials on factor-stim decoder --- didn't help
decod_fds = { 'stim_2_var_2_correct','stim_2_var_2_incorrect'};
test_struct = struct();
choice_after_stim_struct =  get_binary_classifier( test_struct,proj_struct, choice_opt,'IF_CROSSVAL',1,'IF_FRAMEWISE',choice_opt.IF_FRAMEWISE,'fd_names',decod_fds);
[choice_proj_struct] = get_projections(proj_struct,choice_after_stim_struct.B(:,2:end)',decod_fds,'bias',choice_after_stim_struct.B(:,1));
[ choice_after_stim_struct ] =  get_binary_decoder_disc_time(choice_proj_struct, choice_after_stim_struct, ...
    decod_fds,choice_opt,'IF_FRAMEWISE',choice_opt.IF_FRAMEWISE,'threshold',0);

plot_pop_vectors(proj_struct,decod_fds,1,test_opt,...
        'plot_ylabel','proj to choice-stim','plot_num_cols',2)

figure; hold on
plot_binary_decoder(choice_after_stim_struct,choice_opt)
title('Choice-stim decoder')

 %% combine threshold trials 
proj_struct.TS_L1 = [];
proj_struct.TS_L2 = [];
 for f = 1:numel(TS_L1_fds)
      proj_struct.TS_L1 = [ proj_struct.TS_L1;proj_struct.(TS_L1_fds{f})];
 end
 for f = 1:numel(TS_L2_fds)
      proj_struct.TS_L2= [ proj_struct.TS_L1;proj_struct.(TS_L2_fds{f})];
 end
 
choice_after_stim_struct =  get_binary_classifier( test_struct,proj_struct, choice_opt,'IF_CROSSVAL',1,'IF_FRAMEWISE',choice_opt.IF_FRAMEWISE,'fd_names',choice_opt.fd_names);
[choice_proj_struct] = get_projections(proj_struct,choice_after_stim_struct.B(:,2:end)',test_opt.fd_names,'bias',choice_after_stim_struct.B(:,1));

plot_pop_vectors(choice_proj_struct,test_opt.fd_names,1,test_opt,...
        'plot_ylabel','proj to choice-stim','plot_num_cols',3)
   
[ test_struct ] =  get_binary_decoder_disc_time( proj_struct, choice_after_stim_struct,...
    test_opt.fd_names,test_opt,'IF_FRAMEWISE',test_opt.IF_FRAMEWISE,'threshold',0);
figure;
subplot(1,2,1)
plot_proj_traces(proj_struct,test_opt.fd_names,test_opt,...
    'plot_ylabel','Projection')
title('Stim-choice decoder (TS.L1 vs TS.L2)')

hold on
subplot(1,2,2)
hold on
plot_binary_decoder(test_struct,test_opt)

%% save cell structure 
output_save_name = [save_path filesep  'ProcTex_' caiman_file];
save(output_save_name,'tcell_struct')
disp(['Output struct saved as:' output_save_name ])


%% =========================== CHECK PLOTS ======================================
% %% Plot STAs for trigger cells (cells to monitor)
% figure('name','trigger sta traces')
% num_plot_cols = 4;
% num_plot_rois = length(cell_idx_struct.(opt.trigger_idx_fd));
% num_plot_rows = ceil(num_plot_rois/num_plot_cols);
% plot_count = 1;
% for ii = 1:num_plot_rois
%     i = cell_idx_struct.(opt.trigger_idx_fd)(ii);
%     subtightplot(num_plot_rows,num_plot_cols,plot_count)
%     % plot traces
%     hold on
%     for t = 1:size(cell_struct(i).sta_traces,1)
%         plot(cell_struct(i).sta_traces(t,:),'color',opt.trial_color(t,:) ,'linewidth',1)
%     end
%     plot(cell_struct(i).sta_trace,'color',[.5 .5 .5],'linewidth',1.5)
%     
%     xlim([0 opt.sta_pre_frames+opt.sta_post_frames+1])
%     set(gca,'xtick',[],'xcolor',[1 1 1])
%     axis square
%     
%     plot([opt.sta_pre_frames opt.sta_pre_frames],ylim,'color',[.5 .5 .5]) % start of withold window
%     plot([opt.sta_pre_frames opt.sta_pre_frames] + length(opt.withold_frames_adj),ylim,'color',[0 0 0]) % go-cue
% 
%     plot_count = plot_count+1;
%     
%     text(0.05,1,['ROI ' num2str(i)],'units','normalized', 'horizontalalignment','left', 'color','black')
%     text(0.05,.9,['sensory auc ' num2str(cell_struct(i).correct_stimAUC,'%10.2f')],'units','normalized', 'horizontalalignment','left', 'color','black')
%     text(0.05,.8,['zscore auc '  num2str(cell_struct(i).correct_stimAUC_zscore,'%10.2f') ],'units','normalized', 'horizontalalignment','left', 'color','black')
%     
% end
% suptitle([opt.trigger_idx_fd ' rois, stim-triggered response'])


% %% Show sensory cells on maps
% figure('name','pref. texture on fov');
% subplot(1,2,1)
% imagesc(com_fov)
% colormap(gray)
% colorbar('location','southoutside');
% axis square
% title('Detected ROIs')
% 
% ax1 = subplot(1,2,2)
% value_field = 'pref_tex';
% plot_value_in_rois( cell_struct, value_field,[256 256],ax1,'colorlut',[[1,1,1];opt.type_color],'IF_NORM_PIX',0,'IF_CONTOUR',1,'IF_SHOW_OPSIN',1,'zlimit',[0 4]);
% set(gca,'Ydir','reverse')
% title('Sensory cells (colored by pref. texture)')
% 
% %% Plot auc distributions
% figure('name','correct stim auc')
% subplot(1,2,1)
% hold on
% histogram(extractfield(cell_struct,'correct_stimAUC'),'facecolor',[.7 .7 .7],'edgecolor','none','BinWidth',.05)
% histogram(extractfield(cell_struct(extractfield(cell_struct,'is_tuned')==1),'correct_stimAUC'),'facecolor','none','edgecolor',[0,0,1],'BinWidth',.05)
% xlabel('Tex response auc')
% axis square
% 
% subplot(1,2,2)
% hold on
% histogram(extractfield(cell_struct,'correct_stimAUC_zscore'),'facecolor',[.7 .7 .7],'edgecolor','none','BinWidth',.5)
% histogram(extractfield(cell_struct(extractfield(cell_struct,'is_tuned')==1),'correct_stimAUC_zscore'),'facecolor','none','edgecolor',[0,0,1],'BinWidth',.5)
% xlabel('Tex response auc (zscore)')
% axis square
% 
% 

